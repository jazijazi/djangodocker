version: "3.7"

services:
  app:
    build: './volumes'
    container_name: 'app'
    restart: 'always'
    environment:
      - SECRET_KEY=${SECRET_KEY}
      - DJANGO_SUPERUSER_PASSWORD=${DJANGO_SUPERUSER_PASSWORD}
      - DJANGO_SUPERUSER_USERNAME=${DJANGO_SUPERUSER_USERNAME}
      - DJANGO_SUPERUSER_EMAIL=${DJANGO_SUPERUSER_EMAIL}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - GUNICORN_WORKER=${GUNICORN_WORKER}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
    expose:
      - '8000'
    volumes:
      - type: 'bind'
        source: './volumes/djangodocker'
        target: '/app'
      - type : 'bind'
        source : './nginx/gunicorn'
        target : '/run/gunicorn'
      - type : 'bind'
        source : './volumes/static'
        target : '/static' #we set STATIC_ROOT in setting 
    depends_on:
      - 'nginx'
      - 'postgres'

  postgres:
    image: 'postgres:latest'
    container_name: 'postgres'
    restart: 'always'
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    user: 1000:1000
    expose:
      - '5432'

    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "${POSTGRES_DB}", "-U", "${POSTGRES_USER}" , "||" , "exit 1"]
      timeout: 3s
      interval: 10s
      retries: 5
      
    volumes:
      - type: 'bind'
        source: './volumes/dbdata'
        target: '/var/lib/postgresql/data'

  nginx:
    build: './nginx'
    container_name: 'nginx'
    restart: 'always'
    ports:
      - '80:80'

    volumes:
      - type: 'bind'
        source: './volumes/media'
        target: '/app/media'

      - type : 'bind'
        source : './volumes/static'
        target: '/app/static'

      - type : 'bind'
        source : './nginx/gunicorn'
        target : '/run/gunicorn'

      - type : 'bind'
        source : './nginx/logs'
        target : '/var/log/nginx'

  redis:
    image: 'redis:latest'
    container_name: 'redis'
    restart: 'always'
    expose:
      - '6379'
    healthcheck:
      test: [ "CMD" , "redis-cli" , "ping" , "||" , "exit 1"]
      timeout: 5s
      interval: 10s
      retries: 5

  celery:
    build: './volumes'
    container_name: 'celery'
    restart: 'always'
    environment:
      - SECRET_KEY=${SECRET_KEY}
      - DJANGO_SUPERUSER_PASSWORD=${DJANGO_SUPERUSER_PASSWORD}
      - DJANGO_SUPERUSER_USERNAME=${DJANGO_SUPERUSER_USERNAME}
      - DJANGO_SUPERUSER_EMAIL=${DJANGO_SUPERUSER_EMAIL}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - GUNICORN_WORKER=${GUNICORN_WORKER}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
    command: celery -A djangodocker worker --beat -l debug
    # --logfile="/var/log/celery/%n%I.log" --pidfile="/var/run/celery/%n.pid"
    volumes:
    - type: 'bind'
      source: './volumes/djangodocker'
      target: '/app'
      
    - type: 'bind'
      source: './volumes/celerydata'
      target: '/var/log/celery'

    - type: 'bind'
      source: './volumes/celerydata'
      target: '/var/run/celery'
      
    depends_on:
      - 'app'
      - 'redis'